// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16],
        zr,
        ng;

    PARTS:
    // Put your code here:
    And16(a[0..15]=true,b[0..15]=false,out=zero);
    Mux16(a[0..15]=x,b[0..15]=zero,sel=zx,out=xorzero);
    Mux16(a[0..15]=y,b[0..15]=zero,sel=zy,out=yorzero);
    Not16(in[0..15]=xorzero,out[0..15]=notx);
    Not16(in[0..15]=yorzero,out[0..15]=noty);
    Mux16(a[0..15]=xorzero,b[0..15]=notx,sel=nx,out=xnx);
    Mux16(a[0..15]=yorzero,b[0..15]=noty,sel=ny,out=yny);
    Add16(a[0..15]=xnx,b[0..15]=yny,out=sumxy);
    And16(a[0..15]=xnx,b[0..15]=yny,out=xandy);
    Mux16(a[0..15]=xandy,b[0..15]=sumxy,sel=f,out=truout);
    Not16(in[0..15]=truout,out[0..15]=notout);
    Mux16(a[0..15]=truout,b[0..15]=notout,sel=no,out=out);
    Mux16(a[0..15]=truout,b[0..15]=notout,sel=no,out[0..7]=outlsb,out[8..15]=outmsb,out[15]=sign);
    Or8Way(in[0..7]=outlsb,out=lsbor);
    Or8Way(in[0..7]=outmsb,out=msbor);
    Or(a=lsbor,b=msbor,out=zerornot);
    Not(in=zerornot,out=zr);
    Mux(a=false,b=true,sel=sign,out=ng);
}

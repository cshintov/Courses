// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*decoding the instuction*/
    And16(a=true,b=instruction,out[15]=ityp,out[12]=a,out[11]=c1,out[10]=c2,out[9]=c3,out[8]=c4,out[7]=c5,out[6]=c6,out[5]=d1,out[4]=d2,out[3]=d3,out[2]=j1,out[1]=j2,          out[0]=j3);

    /*Aregister gets either the input instruction or ALU output*/
    Mux16(a=instruction ,b=aluout ,sel=ityp ,out=inA );
    
    /*ALU 's second input is either A or M*/
    Mux16(a=outA ,b=inM ,sel=a ,out=AorM);
    
    /*load ARegister if the instruction is A-instruction else if the C-instruction says it to load*/
    Not(in=ityp, out=nityp);
    Or(a=nityp,b=d1,out=loadA);
    ARegister(in=inA ,load=loadA ,out=outA ,out[0..14]=addressM);
    
    /*load DRegister only if the C-instruction says it to load*/
    And(a=ityp,b=d2,out=loadD);
    DRegister(in=aluout ,load=loadD ,out=D );
    
    ALU(x=D ,y=AorM ,zx=c1 ,nx=c2 ,zy=c3 ,ny=c4 ,f=c5 ,no=c6 ,out=aluout ,out=outM ,zr=zr ,ng=ng );
    PC(in=outA ,load=goto ,inc=true ,reset=reset ,out[0..14]=pc );
    
    /*decoding the jump bits*/
    DMux8Way(in=true ,sel[2]=j1 ,sel[1]=j2 ,sel[0]=j3 ,a=njmp ,b=jgt ,c=jeq ,d=jge ,e=jlt ,f=jne ,g=jle ,h=jmp );
    
    /*decoding the status outputs*/
    DMux4Way(in=true ,sel[1]=zr ,sel[0]=ng ,a=gt ,b=lt ,c=eq ,d=junk );
    Or(a=gt ,b=eq ,out=ge );
    Or(a=lt ,b=eq ,out=le );
    Not(in=eq ,out=ne );
    
    /*if jumpif is set, jump if jump condition is true*/
    Not(in=njmp,out=jumpif );
    
    /*deciding which jump-type to set*/
    And(a=jgt ,b=gt ,out=jmpgt);
    And(a=jeq ,b=eq ,out=jmpeq);
    And(a=jge ,b=ge ,out=jmpge);
    And(a=jlt ,b=lt ,out=jmplt);
    And(a=jne ,b=ne ,out=jmpne);
    And(a=jle ,b=le ,out=jmple);
    And(a=jmp,b=true,out=alwaysjmp);
    
    /*checking whether any jump-type is set and in that case set jump*/
    Or8Way(in[6]=jmpgt ,in[5]=jmpeq , in[4]=jmpge ,in[3]=jmplt ,in[2]=jmpne , in[1]=jmple ,in[0]=alwaysjmp ,out=jump );
    
    /*if jumpif is set and jump is set , set gotoif*/
    And(a=jumpif,b=jump,out=gotoif);
    
    /*if instruction type is C-instrruction and gotoif is set, then execute jump*/
    And(a=ityp,b=gotoif,out=goto);

    /*for A- instruction writeM =0 ,for C-instruction writeM = d3*/
    Mux(a=false ,b=d3 ,sel=ityp ,out=writeM);
}
